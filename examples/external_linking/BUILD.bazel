load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(
    "@rules_pycross//pycross:defs.bzl",
    "package_annotation",
    "pycross_lock_file",
    "pycross_pdm_lock_model",
    "pycross_target_environment",
)
load(
    "@rules_pycross//pycross:toolchain.bzl",
    "pycross_hermetic_toolchain",
)

_darwin_x86_64 = [
    "@platforms//os:macos",
    "@platforms//cpu:x86_64",
]

_darwin_arm64 = [
    "@platforms//os:macos",
    "@platforms//cpu:arm64",
]

_linux_x86_64 = [
    "@platforms//os:linux",
    "@platforms//cpu:x86_64",
]

_linux_arm64 = [
    "@platforms//os:linux",
    "@platforms//cpu:arm64",
]

platform(
    name = "darwin_x86_64",
    constraint_values = _darwin_x86_64,
)

platform(
    name = "darwin_arm64",
    constraint_values = _darwin_arm64,
)

platform(
    name = "linux_x86_64",
    constraint_values = _linux_x86_64,
)

platform(
    name = "linux_arm64",
    constraint_values = _linux_arm64,
)

pycross_target_environment(
    name = "python_darwin_x86_64",
    abis = ["cp310"],
    platforms = ["macosx_12_0_x86_64"],
    python_compatible_with = _darwin_x86_64,
    version = "3.10.8",
    visibility = ["//visibility:public"],
)

pycross_target_environment(
    name = "python_darwin_arm64",
    abis = ["cp310"],
    platforms = ["macosx_12_0_arm64"],
    python_compatible_with = _darwin_arm64,
    version = "3.10.8",
    visibility = ["//visibility:public"],
)

pycross_target_environment(
    name = "python_linux_x86_64",
    abis = ["cp310"],
    platforms = [] + [
        "manylinux_2_%s_x86_64" % str(i)
        for i in range(5, 38)
    ],
    python_compatible_with = _linux_x86_64,
    version = "3.10.8",
    visibility = ["//visibility:public"],
)

pycross_target_environment(
    name = "python_linux_arm64",
    abis = ["cp310"],
    platforms = [
        "linux_aarch64",
        "manylinux2014_aarch64",
    ] + [
        "manylinux_2_%s_aarch64" % str(i)
        for i in range(17, 25)
    ],
    python_compatible_with = _linux_arm64,
    version = "3.10.8",
    visibility = ["//visibility:public"],
)

pycross_hermetic_toolchain(
    name = "pycross_darwin_linux",
    exec_interpreter = "@python3_10_aarch64-apple-darwin//:py3_runtime",
    target_interpreter = "@python3_10_x86_64-unknown-linux-gnu//:py3_runtime",
)

toolchain(
    name = "pycross_darwin_linux_tc",
    exec_compatible_with = _darwin_arm64,
    target_compatible_with = _linux_x86_64,
    toolchain = ":pycross_darwin_linux",
    toolchain_type = "@rules_pycross//pycross:toolchain_type",
)

pycross_hermetic_toolchain(
    name = "pycross_linux_darwin",
    exec_interpreter = "@python3_10_x86_64-unknown-linux-gnu//:py3_runtime",
    target_interpreter = "@python3_10_aarch64-apple-darwin//:py3_runtime",
)

toolchain(
    name = "pycross_linux_darwin_tc",
    exec_compatible_with = _linux_x86_64,
    target_compatible_with = _darwin_arm64,
    toolchain = ":pycross_linux_darwin",
    toolchain_type = "@rules_pycross//pycross:toolchain_type",
)

pycross_hermetic_toolchain(
    name = "pycross_linux_x86_64_linux_arm64",
    exec_interpreter = "@python3_10_x86_64-unknown-linux-gnu//:py3_runtime",
    target_interpreter = "@python3_10_aarch64-unknown-linux-gnu//:py3_runtime",
)

toolchain(
    name = "pycross_linux_x86_64_linux_arm64_tc",
    exec_compatible_with = _linux_x86_64,
    target_compatible_with = _linux_arm64,
    toolchain = ":pycross_linux_x86_64_linux_arm64",
    toolchain_type = "@rules_pycross//pycross:toolchain_type",
)

pycross_pdm_lock_model(
    name = "example_lock_model",
    lock_file = "pdm.lock",
    project_file = "pyproject.toml",
)

pycross_lock_file(
    name = "example_lock",
    out = "example_lock.bzl",
    annotations = {
        "numpy": package_annotation(
            always_build = True,
            build_dependencies = [
                "cython",
                "setuptools",
                "wheel",
            ],
            build_target = "@//deps/numpy",
        ),
        "pandas": package_annotation(
            always_build = True,
            build_dependencies = [
                "cython",
                "setuptools",
                "wheel",
            ],
        ),
        "psycopg2": package_annotation(
            build_target = "@//deps/psycopg2",
        ),
        "setproctitle": package_annotation(
            always_build = True,
            build_dependencies = [
                "setuptools",
                "wheel",
            ],
        ),
    },
    default_alias_single_version = True,
    lock_model_file = ":example_lock_model",
    target_environments = [
        ":python_darwin_x86_64",
        ":python_darwin_arm64",
        ":python_linux_x86_64",
        ":python_linux_arm64",
    ],
)

_GENERATED = {
    "example_lock.bzl": "//:example_lock.bzl",
}

# Generate the updater script so there's only one target for devs to run,
# even if many generated files are in the source folder.
write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        # This depends on bash, would need tweaks for Windows
        "#!/usr/bin/env bash",
        # Bazel gives us a way to access the source folder!
        "cd $BUILD_WORKSPACE_DIRECTORY",
    ] + [
        # Paths are now relative to the workspace.
        # We can copy files from bazel-bin to the sources
        "cp -fv bazel-bin/{1} {0}".format(
            k,
            # Convert label to path
            v.replace(":", "/"),
        )
        for [
            k,
            v,
        ] in _GENERATED.items()
    ],
)

# This is what you can `bazel run` and it can write to the source folder
sh_binary(
    name = "update_example_lock",
    srcs = ["update.sh"],
    data = _GENERATED.values(),
)
