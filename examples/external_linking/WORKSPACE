workspace(
    name = "jvolkman_rules_pycross_example",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

rules_foreign_cc_commit = "0ed27c13b18f412e00e9122fc01327503d52579c"

http_archive(
    name = "rules_foreign_cc",
    sha256 = "c7913eb3ce2e9fea0e1b2ba65c51114ea66a524d20d974f720a9baa5cbbb2ab3",
    strip_prefix = "rules_foreign_cc-%s" % rules_foreign_cc_commit,
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/%s.tar.gz" % rules_foreign_cc_commit,
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

# This sets up some common toolchains for building targets. For more details, please see
# https://bazelbuild.github.io/rules_foreign_cc/0.9.0/flatten.html#rules_foreign_cc_dependencies
rules_foreign_cc_dependencies()

http_archive(
    name = "rules_python",
    sha256 = "497ca47374f48c8b067d786b512ac10a276211810f4a580178ee9b9ad139323a",
    strip_prefix = "rules_python-0.16.1",
    url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.16.1.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_10",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = "3.10",
)

load("@python3_10//:defs.bzl", "interpreter")

local_repository(
    name = "jvolkman_rules_pycross",
    path = "../..",
)

load("@jvolkman_rules_pycross//pycross:repositories.bzl", "rules_pycross_dependencies")

rules_pycross_dependencies(python_interpreter_target = interpreter)

# Setup a CC toolchain using bazel-zig-cc
# https://git.sr.ht/~motiejus/bazel-zig-cc
BAZEL_ZIG_CC_VERSION = "v1.0.0-rc4"

http_archive(
    name = "bazel-zig-cc",
    sha256 = "af784b604c08f385358113dc41e22736369a8ad09951fecf31dd13c35f4aaa62",
    strip_prefix = "bazel-zig-cc-{}".format(BAZEL_ZIG_CC_VERSION),
    urls = ["https://git.sr.ht/~motiejus/bazel-zig-cc/archive/{}.tar.gz".format(BAZEL_ZIG_CC_VERSION)],
    patches = [
        "//patches:bazel-zig-cc-dynamic-linker.patch",
        "//patches:bazel-zig-cc-mcpu.patch",
        "//patches:bazel-zig-cc-name-patterns.patch",
    ],
    patch_args = ["-p1"],
)

load(
    "@bazel-zig-cc//toolchain:defs.bzl",
    "URL_FORMAT_NIGHTLY",
    zig_toolchains = "toolchains",
)

zig_version = "0.11.0-dev.1011+40ba4d4a8"

zig_host_platform_sha256 = {
    "linux-aarch64": "78b235071545ad6f064c2968b923b2830d7f5f51bbb387d091d687fa22207ee1",
    "linux-x86_64": "867de39229dae954acbf75d329138ac8b556e9360f23db71a7eceb9b528c8d86",
    "macos-aarch64": "abe0b047a244fc269d657fdfe88fb37b483d0116fe3f2d64bd531c987175e1a6",
    "macos-x86_64": "85a4db4fe260273efd811f8e3589d12226eb16a724813e847c1171d3bc4921c7",
}

zig_toolchains(
    host_platform_sha256 = zig_host_platform_sha256,
    url_formats = [
        URL_FORMAT_NIGHTLY,
    ],
    version = zig_version,
)

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.24",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.24",
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
)

register_toolchains(
    "//:pycross_darwin_linux_tc",
    "//:pycross_linux_darwin_tc",
    "//:pycross_linux_x86_64_linux_arm64_tc",
)

load("//:example_lock.bzl", "repositories")
repositories()

load("//third_party:repositories.bzl", third_party_repositories = "repositories")
third_party_repositories()

load("//third_party:setup.bzl", third_party_setup = "setup")
third_party_setup()
