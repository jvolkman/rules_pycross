workspace(
    name = "rules_pycross_smoke",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "bda4a69fa50411b5feef473b423719d88992514d259dadba7d8218a1d02c7883",
    strip_prefix = "bazel-lib-2.3.0",
    url = "https://github.com/aspect-build/bazel-lib/releases/download/v2.3.0/bazel-lib-v2.3.0.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies", "aspect_bazel_lib_register_toolchains")

aspect_bazel_lib_dependencies()

aspect_bazel_lib_register_toolchains()

# CC toolchain

HERMETIC_CC_TOOLCHAIN_VERSION = "v2.2.1"

http_archive(
    name = "hermetic_cc_toolchain",
    sha256 = "3b8107de0d017fe32e6434086a9568f97c60a111b49dc34fc7001e139c30fdea",
    urls = [
        "https://mirror.bazel.build/github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz".format(HERMETIC_CC_TOOLCHAIN_VERSION),
        "https://github.com/uber/hermetic_cc_toolchain/releases/download/{0}/hermetic_cc_toolchain-{0}.tar.gz".format(HERMETIC_CC_TOOLCHAIN_VERSION),
    ],
)

load("@hermetic_cc_toolchain//toolchain:defs.bzl", zig_toolchains = "toolchains")

zig_toolchains()

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.19",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.28",
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
)

# Alternative CC toolchain (not registered, selected via --extra_toolchains in .bazelrc)

http_archive(
    name = "toolchains_llvm",
    canonical_id = "0.10.3",
    sha256 = "b7cd301ef7b0ece28d20d3e778697a5e3b81828393150bed04838c0c52963a01",
    strip_prefix = "toolchains_llvm-0.10.3",
    url = "https://github.com/grailbio/bazel-toolchain/releases/download/0.10.3/toolchains_llvm-0.10.3.tar.gz",
)

load("@toolchains_llvm//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@toolchains_llvm//toolchain:rules.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_toolchain",
    llvm_version = "16.0.0",
)

# Python

http_archive(
    name = "rules_python",
    sha256 = "c68bdc4fbec25de5b5493b8819cfc877c4ea299c0dcb15c244c5a00208cde311",
    strip_prefix = "rules_python-0.31.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.31.0/rules_python-0.31.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_multi_toolchains", "python_register_toolchains")

py_repositories()

python_register_multi_toolchains(
    name = "python",
    # The default is latest - 1 to make sure nothing assumes latest == default
    default_version = "3.11.6",
    python_versions = [
        "3.10.11",
        "3.11.6",
        "3.12.0",
    ],
    register_coverage_tool = True,
)

load("@python//3.12.0:defs.bzl", python_interpreter = "interpreter")

# Third-party deps

http_archive(
    name = "zstd",
    build_file = "//third_party/zstd:zstd.BUILD",
    sha256 = "9c4396cc829cfae319a6e2615202e82aad41372073482fce286fac78646d3ee4",
    strip_prefix = "zstd-1.5.5",
    urls = ["https://github.com/facebook/zstd/releases/download/v1.5.5/zstd-1.5.5.tar.gz"],
)

# Pycross

local_repository(
    name = "rules_pycross",
    path = "../..",
)

load("@rules_pycross//pycross:repositories.bzl", "rules_pycross_dependencies")

rules_pycross_dependencies(python_interpreter)

load("@rules_pycross//pycross:defs.bzl", "package_annotation")
load("@rules_pycross//pycross:workspace.bzl", "lock_repo_model_pdm", "lock_repo_model_poetry", "pycross_lock_file_repo", "pycross_lock_repo", "pycross_register_for_python_toolchains")

pycross_register_for_python_toolchains(
    name = "smoke_environments",
    platforms = [
        "aarch64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    python_toolchains_repo = "@python",
)

load("@smoke_environments//:defs.bzl", "environments")

# lock_repo with Poetry
pycross_lock_repo(
    name = "poetry_lock_repo",
    annotations = {
        "regex": package_annotation(
            always_build = True,
            build_dependencies = [
                "setuptools",
                "wheel",
            ],
        ),
        "zstandard": package_annotation(
            always_build = True,
            build_dependencies = [
                "setuptools",
                "wheel",
            ],
            build_target = "@//pdm:zstandard_build",
        ),
    },
    default_alias_single_version = True,
    local_wheels = [
        "@//:cowsay-6.1-py3-none-any.whl",
    ],
    lock_model = lock_repo_model_poetry(
        lock_file = "@//:poetry.lock",
        project_file = "@//:pyproject.toml",
    ),
    target_environments = environments,
)

load("@poetry_lock_repo//:defs.bzl", poetry_lock_install_deps = "install_deps")

poetry_lock_install_deps()

# lock_repo with PDM
pycross_lock_repo(
    name = "pdm_lock_repo",
    annotations = {
        "regex": package_annotation(
            always_build = True,
            build_dependencies = [
                "setuptools",
                "wheel",
            ],
        ),
        "zstandard": package_annotation(
            always_build = True,
            build_dependencies = [
                "setuptools",
                "wheel",
            ],
            build_target = "@//pdm:zstandard_build",
        ),
    },
    default_alias_single_version = True,
    lock_model = lock_repo_model_pdm(
        lock_file = "@//:pdm.lock",
        project_file = "@//:pyproject.toml",
    ),
    target_environments = environments,
)

load("@pdm_lock_repo//:defs.bzl", pdm_lock_install_deps = "install_deps")

pdm_lock_install_deps()

# Lock repo for vended poetry lock
pycross_lock_file_repo(
    name = "poetry_lock_file_repo",
    lock_file = "//poetry:lock.bzl",
)

load("@poetry_lock_file_repo//:requirements.bzl", poetry_install_deps = "install_deps")

poetry_install_deps()

# Lock repo for vended poetry lock
pycross_lock_file_repo(
    name = "pdm_lock_file_repo",
    lock_file = "//pdm:lock.bzl",
)

load("@pdm_lock_file_repo//:requirements.bzl", pdm_install_deps = "install_deps")

pdm_install_deps()

# This just tests that we can register toolchains for single version python repos.
python_register_toolchains(
    name = "python_single",
    python_version = "3.12.0",
)

pycross_register_for_python_toolchains(
    name = "pycross_toolchains_single",
    platforms = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    python_toolchains_repo = "@python_single",
)
