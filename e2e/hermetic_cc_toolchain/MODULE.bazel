bazel_dep(name = "aspect_bazel_lib", version = "2.9.4")
bazel_dep(name = "hermetic_cc_toolchain", version = "2.2.1")
bazel_dep(name = "rules_pycross", version = "0.0.0")
bazel_dep(name = "rules_pycross_e2e_shared", version = "0.0.0")
bazel_dep(name = "rules_python", version = "1.0.0")

local_path_override(
    module_name = "rules_pycross",
    path = "../..",
)

local_path_override(
    module_name = "rules_pycross_e2e_shared",
    path = "../shared",
)

# rules_python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# The default is latest - 1 to make sure nothing assumes latest == default
python.toolchain(
    is_default = True,
    python_version = "3.11.6",
)
python.toolchain(python_version = "3.10.11")
python.toolchain(python_version = "3.12.0")
use_repo(python, "python_versions")

# rules_pycross
environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "rules_pycross_e2e_environments",
    platforms = [
        "aarch64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
)
use_repo(environments, "rules_pycross_e2e_environments")

# Use the lock_import extension to import external lock files.
lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")

# lock_repo with uv and some package overrides
lock_import.import_uv(
    lock_file = "//:uv.lock",
    project_file = "//:pyproject.toml",
    repo = "uv",
    target_environments = ["@rules_pycross_e2e_environments//:environments"],
)
lock_import.package(
    name = "regex",
    always_build = True,
    build_dependencies = [
        "setuptools",
        "wheel",
    ],
    repo = "uv",
)

# The actual repos are loaded from the lock_repos extension.
lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "uv")

# hermetic_cc_toolchain
toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(toolchains, "zig_sdk")

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.19",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.28",
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
)
